//
// MIT License
//
// Copyright (c) 2024 Incendo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
package org.incendo.disruptor.disruption;

import java.time.Duration;
import java.util.Objects;
import java.util.function.Function;
import org.apiguardian.api.API;
import org.incendo.disruptor.DisruptorContext;

/**
 * Disruption of an invocation.
 *
 * @since 1.0.0
 */
@API(status = API.Status.STABLE, since = "1.0.0")
public interface Disruption {

    /**
     * Returns a disruption that delays the invocation by the given {@code duration}.
     *
     * @param duration delay duration
     * @return the disruption
     */
    static Disruption delaying(final Duration duration) {
        Objects.requireNonNull(duration, "duration");
        return new Delay(duration);
    }

    /**
     * Returns a disruption that throws the exception generated by the given function.
     *
     * <p>If the {@code generator} generates a non-{@link RuntimeException} then the exception will be wrapped in a
     * {@link org.incendo.disruptor.DisruptionException}.</p>
     *
     * @param generator function that generates the throwable
     * @return the disruption
     */
    static Disruption throwing(final Function<DisruptorContext, Throwable> generator) {
        Objects.requireNonNull(generator, "throwable");
        return new Throwing(generator);
    }

    /**
     * Triggers the disruption.
     *
     * @param context disruption context
     */
    void trigger(DisruptorContext context);
}
